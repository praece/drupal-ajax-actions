<?php

/**
 * @file
 * Handles links for doing things via ajax.
 */

/**
 * Implements hook_menu().
 */
 
function ajax_actions_menu() {
  $items = array();
  $items['ajax/actions'] = array(
    'page callback' => 'ajax_actions',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/ajax_actions.inc',
  );
  return $items;
}

/**
 * Builds an ajax link.
 *
 * @param $text
 *   The link text or html to display.
 *
 * @param $actions
 *   An array of actions you want to be executed.
 * 
 * @return string
 *   The markup for an ajax link.
 */

function ajax_actions_l($text, $actions = array(), $settings = array()) {
  $options['actions'] = $actions;
  $options['settings'] = $settings;
  
  // Check permissions before building the link.  
  if (!ajax_actions_permissions($options)) {
    return;
  }
  
  // Set any default values for actions.
  ajax_actions_defaults($options);
  
  // Include the ajax actions js and css.
  ajax_actions_link_includes($options);
  
  return ajax_actions_build_link($text, $options);
}

/**
 * Check permissions.
 *
 * @param $options
 *   Options for the ajax link.
 * 
 * @return boolean
 *   Whether or not all permission checks passed.
 */

function ajax_actions_permissions($options) {
  foreach ($options['actions'] as $action) {
    if ($action['perm']['node_access']) {
      foreach ($action['perm']['node_access'] as $item) {
        if (!node_access($item['op'], node_load($item['nid']))) {
          return FALSE;
        }
      }
    }
    if ($action['perm']['user_access']) {
      foreach ($action['perm']['user_access'] as $item) {
        if (!user_access($item)) {
          return FALSE;
        }
      }
    }
    $hook_perms = module_invoke_all('ajax_actions_perms', $action);
    foreach ($hook_perms as $hook_perm) {
      if (!$hook_perm) {
        return FALSE;
      }
    }
  }
  return TRUE;
}

/**
 * Set some default values.
 *
 * @param $options
 *   Options for the ajax link.
 */

function ajax_actions_defaults(&$options) {
  $options['settings'] += array(
      'dom_id' => ajax_actions_dom_id(),
      'class' => array(),
  );
  
  $options['settings']['class'][] = 'ajax-actions-dom-id-' . $options['settings']['dom_id'];
  
  drupal_alter('ajax_actions_defaults', $options);
}

/**
 * Generate unique dom id.
 */

function ajax_actions_dom_id() {
  return mt_rand();
}

/**
 * Include any relevant JS or CSS on page load.
 * 
 * @param $options
 *   Options for the link.
 * 
 */

function ajax_actions_link_includes($options) {
  //drupal_add_js(drupal_get_path('module', 'ajax_actions') . '/ajax_actions.js');
  foreach ($options['actions'] as $action) {
    module_invoke_all('ajax_actions_link_include', $action);
  }
}

/**
 * Build the ajax link.
 *
 * @param $options
 *   Options for the link.
 *
 * @return string
 *   Markup of the ajax link.
 * 
 */

function ajax_actions_build_link($text, $options) {
  $link = array(
    '#type' => 'link',
    '#title' => $text,
    '#href' => '',
    '#options' => array('html' => TRUE),
    '#attributes' => array(
      'class' => $options['settings']['class'],
    ),
    '#ajax' => ajax_actions_build_ajax($options),
  );
  
  $link['#attached']['js'][] = drupal_get_path('module', 'ajax_actions') . '/scripts/ajax_actions.js';
  
  return render($link);
}

/**
 * Build the ajax array for the link.
 *
 * @param $options
 *   Options for the array.
 *
 * @return array
 *   #ajax array for a link.
 * 
 */

function ajax_actions_build_ajax($options) {
  $ajax = array(
    'path' => 'ajax/actions',
    'prevent' => '',
    'progress' => array(
      'type' => 'none',
    ),
    'ajax_actions' => $options,
  );
  
  return $ajax;
}