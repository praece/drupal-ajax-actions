<?php

/**
 * @file
 * Handles links for doing things via ajax.
 */

/**
 * Builds an ajax link.
 *
 * @param $text
 *   The link text or html to display.
 *
 * @param $actions
 *   An array of ajax actions.
 */

function ajax_actions_l($text, $actions = array(), $settings = array()) {
  $options['actions'] = $actions;
  $options['settings'] = $settings;
  
  // Check permissions before building the link.  
  if (!ajax_actions_permissions($options)) {
    return;
  }
  
  // Set any default values for actions.
  ajax_actions_defaults($options);
  
  // Include the ajax actiosn js and css.
  ajax_actions_link_includes($options);
  
  // Pass data in to jquery.data so we can pass it back in post.
  ajax_actions_set_data($options, $options['settings']['selector']);
  
  return '<span class="ajax-actions-dom-id-' . $options['settings']['dom_id'] . ' ajax-actions">' . ajax_actions_build_link($text, $options) . '</span>';
}

/**
 * Check permissions.
 *
 * @param $options
 *   Options for the link.
 *
 */

function ajax_actions_permissions($options) {
  foreach ($options['actions'] as $action) {
    if ($action['perm']['node_access']) {
      foreach ($action['perm']['node_access'] as $item) {
        if (!node_access($item['op'], node_load($item['nid']))) {
          return FALSE;
        }
      }
    }
    if ($action['perm']['user_access']) {
      foreach ($action['perm']['user_access'] as $item) {
        if (!user_access($item)) {
          return FALSE;
        }
      }
    }
    $hook_perms = module_invoke_all('ajax_actions_perms', $action);
    foreach ($hook_perms as $hook_perm) {
      if (!$hook_perm) {
        return FALSE;
      }
    }
  }
  return TRUE;
}

/**
 * Set some default values.
 *
 * @param $options
 *   Options for the link.
 *
 */

function ajax_actions_defaults(&$options) {
  $options['settings'] += array(
      'dom_id' => ajax_actions_dom_id(),
      'path' => $_GET['q'],
      'html' => FALSE,
      'class' => array(),
      'default_class' => TRUE,
  );
  
  drupal_alter('ajax_actions_defaults', $options);
  
  // Rebuild the action array to use associative keys so we can use object notation once we are in js.
  foreach ($options['actions'] as $key => $action) {
    $key = is_numeric($key) ? 'action_' . $key : $key;
    $new_actions[$key] = $action;
  }
  $options['actions'] = $new_actions;
  
  if ($options['settings']['default_class']) {
    $options['settings']['class'][] = 'ajax-actions-link';
  }
  
  if (function_exists('spaces_get_space') && !$options['settings']['prepend'] && $og_space = spaces_get_space()){
    $options['settings']['prepend'] = $og_space->group->purl;
  }
  
  $options['settings']['href'] = $options['settings']['prepend'] ? '/' . $options['settings']['prepend'] . '/' . 'ajax_actions' : '/' . 'ajax_actions';
  
  if (!$options['settings']['selector']) {
    $options['settings']['selector'] = '.ajax-actions-dom-id-' . $options['settings']['dom_id'] . ' a';
  }
}

/**
 * Generate unique dom id.
 *
 */

function ajax_actions_dom_id() {
  return mt_rand();
}

/**
 * Include any relevant JS or CSS on page load.
 * 
 * @param $options
 *   Options for the link.
 * 
 */

function ajax_actions_link_includes($options) {
  ctools_add_js('ajax-responder');
  drupal_add_js(drupal_get_path('module', 'ajax_actions') . '/ajax_actions.js');
  drupal_add_css(drupal_get_path('module', 'ajax_actions') . '/ajax_actions.css');
  foreach ($options['actions'] as $action) {
    module_invoke_all('ajax_actions_link_include', $action);
  }
}

/**
 * Set the jquery data element for all links.
 *
 * @param $options
 *   Options for the link.
 *
 */

function ajax_actions_set_data($options = array(), $selector = NULL, $key = 'ajax_actions', $class = NULL) {
  
  static $data;
  
  if (!empty($options)) {
    if ($_POST['ajax_actions']) {
      $data[] = array('selector' => $selector, 'key' => $key, 'value' => $options, 'class' => $class . ' ajax-actions');
    }
    else {
      $data[] = "jQuery('" . $selector . "').data('" . $key . "', " . drupal_to_js($options) . ").addClass('" . $class . " ajax-actions');";
    }
  }
  
  return $data;
  
}

/**
 * Implementation of hook_footer.
 */

function ajax_actions_footer($main) {
  $scripts = ajax_actions_set_data();
  if (!empty($scripts)) {
    $embed_prefix = "\n<!--//--><![CDATA[//><!--\n";
    $embed_suffix = "\n//--><!]]>\n";
    return '<script type="text/javascript">'. $embed_prefix . implode($scripts) . $embed_suffix . '</script>';
  }
}

/**
 * Build the ajax link.
 *
 * @param $options
 *   Options for the link.
 *
 */

function ajax_actions_build_link($text, $options) {
  return l($text, '', array('attributes' => array('class' => implode(' ', $options['settings']['class'])), 'html' => $options['settings']['html'], 'purl' => array('disabled' => TRUE)));
}

/**
 * Implements hook_init().
 */

function ajax_actions_init() {
}

/**
 * Implements hook_menu().
 */
 
function ajax_actions_menu() {
  $items = array();
  $items['ajax_actions'] = array(
    'page callback' => 'ajax_actions',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Call hooks that implement ajax actions, then execute any commands.
 *
 * @param $options
 *   The post data from the ajax link.
 *
 * @param $commands
 *   An array of commands to be executed.
 *
 * @todo 
 *   Huge HACK! using parse_str and urldecode instead of just passing it
 *   because jQuery forms doesn't seem to want to take my object.
 *
 */

function ajax_actions($options = array(), $commands = array()) {
  $options = $_POST['ajax_actions'];
  
  if (!is_array($options)) {
    // Extra steps here are to make sure any special html special chars are removed
    // this was causing issues when attempting to pass back emails.
    $options = urldecode($options);
    $options = html_entity_decode($options, ENT_QUOTES, 'UTF-8');
    parse_str($options, $options);
  }
  
  $_GET['q'] = $options['settings']['path'];
  
  ajax_actions_includes($options);
  
  if (is_array($options['actions'])) {
    foreach ($options['actions'] as $delta => &$action) {
     
      $action['delta'] = $delta;
      
      if (!$action['ignore']) {
        $hook_output = module_invoke_all('ajax_actions_commands', $action, $options);
        $commands = array_merge($commands, $hook_output);
      }
      
      if (end($commands) == 'break') {
        array_pop($commands);
        break;
      }
      
    }
  }
  
  $ajax_link_data = ajax_actions_set_data();
  
  if ($ajax_link_data) {
    $commands[] = array('command' => 'ajax_actions_bulk_data', 'items' => $ajax_link_data);
  }
  
  drupal_alter('ajax_actions_commands', $commands, $options);
  
  ctools_ajax_render($commands);
}

/**
 * Bring in any necessary include files.
 *
 * @param $options
 *   The post data from the ajax link.
 *
 */

function ajax_actions_includes($options) {
  ctools_include('ajax');
}