<?php

function ajax_actions_forms_ajax_actions_commands(&$action, &$options) {
  if ($action['op'] == 'process_form') {
    $form = ajax_actions_form_process($action, $options);
  }
  
  if ($action['op'] == 'node_add_form') {
    $form = ajax_actions_node_form_build($action, $options);
  }
  
  if ($action['op'] == 'node_edit_form') {
    $form = ajax_actions_node_form_build($action, $options);
  }
  
  if ($form) {
    if ($action['command']) {
    $action['commands'][] = $action['command'](render($form));
    }
    else {
      $action['commands'][] = ajax_command_append($action['container'], render($form));
    }
    $action['break'] = TRUE;
  }
}

function ajax_actions_forms_form_alter(&$form, &$form_state, $form_id) {
  if ($form['actions'] && $form_state['build_info']['ajax']) {
    $ajax = $form_state['build_info']['ajax'];
    
    // Give ourselves a class to work with in case we need to replace this
    // markup at some point, for example if there is an error when submitting
    // the form.
    $class = 'ajax-actions-form-' . $ajax['ajax_actions']['settings']['dom_id'];
    $form['#attributes']['class'][] = $class;
    
    // Add the #ajax array to the submit handlers.
    foreach (element_children($form['actions']) as $key) {
      $form['actions'][$key]['#ajax'] = $ajax;
    }
  }
}

function ajax_actions_form_process(&$action, &$options) {
  list($form, $form_state, $form_id, $form_build_id) = ajax_get_form();
  drupal_process_form($form['#form_id'], $form, $form_state);
  
  if (!$form_state['executed']) {
    $selector = '.ajax-actions-form-' . $options['settings']['dom_id'];
    $action['commands'][] = ajax_command_replace($selector, render($form));
    $action['break'] = TRUE;
  }
}

function ajax_actions_node_add_form($type, $settings = array()) {
  $defaults = array(
    'op' => 'node_add_form',
    'type' => $type,
    'container' => 'body',
  );
  
  $action = array_merge($defaults, $settings);
  
  return $action;
}

function ajax_actions_node_edit_form($nid, $settings = array()) {
  $defaults = array(
    'op' => 'node_edit_form',
    'nid' => $nid,
    'container' => 'body',
  );
  
  $action = array_merge($defaults, $settings);
  
  return $action;
}

function ajax_actions_node_form_build(&$action, &$options) {
  global $user;
  
  if ($action['nid']) {
    $node = node_load($action['nid']);
  }
  else {
    $node = (object) array(
      'uid' => $user->uid,
      'name' => (isset($user->name) ? $user->name : ''),
      'type' => $action['type'],
      'language' => LANGUAGE_NONE,
    );
  }
  
  $type = $node->type;
  $form_id = $type . '_node_form';
  
  $new_options = $options;
  $new_options['actions'] = array_slice($options['actions'], $action['delta'] + 1);

  $new_action = array(
    'op' => 'process_form',
  );

  array_unshift($new_options['actions'], $new_action);
  
  $form_state['build_info']['args']['node'] = $node;
  $form_state['build_info']['ajax'] = ajax_actions_build_ajax($new_options);

  if ($action['build_info']) {
    $form_state['build_info'] = array_merge($form_state['build_info'], $action['build_info']);
  }

  $form_state['cache'] = true;
  $form_state['build_info']['files'][] = array('type' => 'inc', 'module' => 'node', 'name' => 'node.pages');
  
  module_load_include('inc', 'node', 'node.pages');

  return drupal_build_form($form_id, $form_state);
}
