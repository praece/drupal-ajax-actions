<?php

function ajax_actions_refresh_view($selector, $settings = array()) {
  $defaults = array(
    'op' => 'refresh_view',
    'selector' => $selector,
  );
  
  $action = array_merge($defaults, $settings);
  
  return $action;
}

function ajax_actions_refresh_node($nid, $settings = array()) {
  $defaults = array(
    'op' => 'refresh_node',
    'nid' => $nid,
  );
  
  $action = array_merge($defaults, $settings);
  
  return $action;
}

function ajax_actions_refresh($callback, $selector, $settings = array()) {
  $defaults = array(
    'op' => 'refresh',
    'callback' => $callback,
    'selector' => $selector,
  );
  
  $action = array_merge($defaults, $settings);
  
  return $action;
}

/**
 * Implementation of hook_ajax_actions_defaults_alter(&$options).
 */
function ajax_actions_refresh_ajax_actions_defaults_alter(&$options) {
  foreach ($options['actions'] as $action) {
    // If we are refreshing a view grab the views ajax info.
    if ($action['op'] == 'refresh_view') {
      $options['settings']['before'][] = array('command' => 'ajax_actions_refresh_view');
      drupal_add_js(drupal_get_path('module', 'ajax_actions_refresh') . '/scripts/ajax_actions_refresh.js');
    }
  }
}

function ajax_actions_refresh_ajax_actions_commands(&$action, &$options) {
  switch ($action['op']) {
    case 'refresh_view':
      // If we have exposed form data, grab it and put it in the post vars
      // where views ajax is expecting it.
      if ($action['view_form']) {
        parse_str($action['view_form'], $view_form);
        
        // Save the current post so we can reset it later.
        $post = $_POST;
        
        // Grab a few things from post that views will need.
        $view_form['ajax_html_ids'] = $post['ajax_html_ids'];
        $view_form['ajax_page_state'] = $post['ajax_page_state'];
        $_POST = $view_form;
      }

      // Save the current request vars so we can reset it later.
      $request = $_REQUEST;
      
      // Grab a few things from request that views will need.
      $settings = $action['view_settings'];
      $settings['ajax_html_ids'] = $request['ajax_html_ids'];
      $settings['ajax_page_state'] = $request['ajax_page_state'];
      $settings['q'] = $request['q'];
      $_REQUEST = $settings;
      
      // Load the inc for views ajax.
      module_load_include('inc', 'views', 'includes/ajax');
      
      // Use views ajax to grab the commands we need. We don't want the scroll
      // command so we just take command 1.
      $return = views_ajax();
      $action['commands'][] = $return['#commands']['1'];
      
      //Reset post and request.
      $_POST = $post;
      $_REQUEST = $request;
      break;
    case 'refresh_node':
      // Build, load and replace the node on the page.
      $node = node_load($action['nid'], NULL, TRUE);
      $view = node_view($node);
      $markup = drupal_render($view);
      drupal_set_title($node->title);
      $selector = '.node.node-' . $node->nid;
      $action['commands'][] = ajax_command_replace($selector, $markup);
      break;
    case 'refresh':
      // This is a simple call the callback and put the result on the page.
      $action['commands'][] = ajax_command_replace($action['selector'], render($action['callback']()));
      break;
  }
}